#!/usr/bin/perl
=Usage
This program is designed to calculate conservation for a specific region. 

Usage: 
	(perl) getCons -i <region> -c <phastCons_path> -o 

	-i 	input: sorted region by chromosome & start.
	-c 	cons_path:the path of phastCons file. phastCons file was download from UCSC. 
		eg. URL of conservation socre for human(hg19) is https://hgdownload.cse.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/
		NOTE: getCons now only support chrN.*.gz  (chrN was chromosome)
	-o 	output directory.

Contact:
	wangxinyuhs\@126.com
=cut

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

our $VERSION = "1.0.1";  			#2018.4.19

#-------------------#
#  Params  Control  #
#-------------------#
my (
	$help,
	$infile,			#input file
	$cons_path,			#cons_path
	
	$outdir,			#output directory
);

GetOptions(
	'help|man|h'       => \$help,
	
	'i|infile=s'       => \$infile,
	'c|cons_path=s'	   => \$cons_path,
	'o|outdir=s'       => \$outdir,
);

print_helpfile() if($help);
required_args($infile,$cons_path,$outdir);
#-------------------#
#    I/O  Control   #
#-------------------#
warn call_time()."Read the region(bed).\n";
my $bed_ref = bed_chr_split($infile); #chr => ([start1, end1],[start2, end2], ...) 
my @chrs_arr = keys %$bed_ref;

warn call_time()."The conservation score path is[chrN.*.gz]:\n";
my @cons_files = glob("$cons_path/chr*.gz");
my %chr_file   = ();
foreach my $file(@cons_files){
	my $file_name = basename $file;
	my $chr = (split /\./, $file_name)[0];
	$chr_file{$chr} = $file;
}
#output
indir_control($cons_path);
outdir_control($outdir);
open OUT,">","$outdir/region_cons.bed" or die $!; 
print OUT "chr\tstart\tend\tmean_cons\tmedian_cons\n";

#-------------------#
#    Calculation    #
#-------------------#
#calculate conservation score of region for each chromosome.
warn call_time()."Calculate conservation score.\n";
foreach my $chr(@chrs_arr){
	warn call_time()."$chr is running...\n";
	unless(exists $chr_file{$chr}){ #chr not exists
		warn "There is no conservation information for $chr. Skip.\n";
		next;
	}

	#store conservation score into array.
	my $cons_fh;
	if($chr_file{$chr} =~ /\.gz$/){
		open $cons_fh, "zcat $chr_file{$chr} |" or die $!." $chr_file{$chr}\n";
	}
	else{
		open $cons_fh, $chr_file{$chr} or die $!." $chr_file{$chr}\n";
	}
	
	my $start = 0;
	my @score = (); #conservation score array
	while(<$cons_fh>){
		if(/step/){ 	#declaration line
			my @arr = split /\s+/;
			$start  = $arr[2];
			$start  =~ s/start=//;
		}
		else{
			chomp;
			$score[$start] = $_ ;
			$start ++ ;
		}
	}
	close $cons_fh;

	#calculate for region.
	my @region = @{ ${$bed_ref}{$chr} }; #current chr
	foreach my $i(0..$#region){
		my ($start, $end) = ($region[$i][0], $region[$i][1]);

		my @region_cons = ();
		foreach my $i( $start .. $end ){
			push @region_cons, $score[$i] if(defined $score[$i]);
		}

		if(scalar @region_cons >= 1){
			my ( $mean , $median ) = ( mean_of_array(@region_cons), median_of_array(@region_cons) ); 
			print OUT "$chr\t$start\t$end\t$mean\t$median\n";
		}
		else{
			print OUT "$chr\t$start\t$end\tNA\tNA\n";
		}
	}

	warn call_time()."$chr is completed.\n";
}
close OUT;


#-------------------#
#    Sub Program    #
#-------------------#

=DESCRIPTION bed_chr_split  	[ INDEPENDENT ]
    * Name: bed_chr_split
    * Function: split bed file into chr arrs.
    * Params: $infile , $has_head
    * Return: \@chr_bed_hs
    * Independence: [ INDEPENDENT ]
=cut

sub bed_chr_split{
	my ( $infile , $has_head ) = @_;
	open my $in_fh,"<",$infile or die $!."\nPlease check up this path!\n";
	
	#delete the head 
	if($has_head){
		<$in_fh>;
	}
	
	my %chr_bed_hs  = ();

	my $chr = "";
	while( <$in_fh> ){
		s/[\r\n]$//g;
		my @arr = split;
		my ( $curChr, $start, $end ) = @arr[0, 1, 2];

		if($curChr ne $chr){  	# current chromosome
			$chr = $curChr;
			$chr_bed_hs{$chr}  = [];
		}
		else{
			push @{ $chr_bed_hs{$chr} } , [ $arr[1], $arr[2] ];
		}
	}
	return \%chr_bed_hs ;
}

sub median_of_array{	#( @array )
	my @data = @_;

	my $num  = scalar @data;
	my @sorted_data = sort {$a <=> $b} @data;

	if($num == 0){
		return "NA";
	}
	elsif($num %2 != 0){
		return $sorted_data[$num * 0.5];
	}
	else{
		return ( $sorted_data[ $num*0.5 - 1 ] + $sorted_data[ $num * 0.5 ] ) * 0.5;
	}
}

sub mean_of_array{		#( @array )
	my @data = @_;

	my ($sum , $num) = (0 , scalar @data);
	foreach my $i (@data){
		$sum += $i;
	}
	if($num > 0){ #has value
		return sprintf( "%0.3f" , $sum/$num ) ;
	}
	else{ #null
		return "NA";
	}
}


sub indir_control{		#( string folder )
	my $indir = $_[0];
	
	unless(-e $indir and -d $indir){		
		die "$indir open error!\nPlease check up this path.\n";
	}
}

sub outdir_control{		#( string folder )
	my $outdir = $_[0];
	
	unless(-e $outdir){	
		mkdir $outdir or die "Can't create $outdir!\nPlease check up this path.\n";
	}
}

#get current time [hour:min:sec month,mday]
sub call_time{
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime;
	my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
	#my @weeks = qw(Sun Mon Tue Wed Thu Fri Sat);
	#$year += 1900;
	
	return "[$hour:$min:$sec $months[$mon],$mday] ";
}

sub print_helpfile{
	print qq(
$0 VERSION: $VERSION
---------------------------------- H E L P ---------------------------------------
Usage: 
	(perl) getCons -i <region> -c <phastCons_path> -o 

	-i 	input: sorted region by chromosome & start.
	-c 	cons_path:the path of phastCons file. phastCons file was download from UCSC. 
		eg. URL of conservation socre for human(hg19) is http://hgdownload.cse.ucsc.edu/goldenPath/hg19/phastCons100way/hg19.100way.phastCons/
		NOTE: getCons now only support chrN.*.gz  (chrN was chromosome)
	-o 	output directory.

Contact:
	wangxinyuhs\@126.com
-------------------------------------------------------------------------------
);
	die "\n";
}

sub required_args{		#( @array )
	my @arr = @_;
	
	foreach my $args(@arr){
		unless($args){
			print "Lack required arguments.\n";
			print_helpfile();
		}
	}
}
